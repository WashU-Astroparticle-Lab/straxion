# Test on each PR.
# We run three types of tests:
#  - Pytest -> these are the "normal" tests and should be run for all
#    python versions
#  - Coveralls -> this is to see if we are covering all our lines of
#    code with our tests. The results get uploaded to
#    coveralls.io/github/WashU-Astroparticle-Lab/straxion
name: Test package

# Trigger this code when a new release is published
on:
  workflow_dispatch:
  release:
    types: [ created ]
  pull_request:
  push:
    branches:
      - main

jobs:
  test:
    name: "${{ matrix.test }}_py${{ matrix.python-version }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: False
      matrix:
        python-version: ["3.11"]
        test: ["coveralls", "pytest"]

    steps:
      # Setup and installation
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: sudo apt-get install -y graphviz

      - name: Install test tollkits
        run: pip install pytest hypothesis coverage coveralls

      - name: Install requirements for Python 3.11
        if: matrix.python-version == '3.11'
        run: pip install git+https://github.com/XENONnT/base_environment.git --force-reinstall

      - name: Install strax and straxion
        run: |
          pip install git+https://github.com/AxFoundation/strax.git --force-reinstall
          pip install .
          pip install tf-keras scikit-learn --upgrade

      - name: Debug GitHub Releases API
        if: matrix.test == 'pytest'
        run: |
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases" | jq .

      - name: Download test data from release
        if: matrix.test == 'pytest'
        run: |
          # Get the test-data draft release
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases" | \
            jq -r '.[] | select(.tag_name=="test-data") | .id' | head -1)

          if [ "$RELEASE_ID" != "null" ] && [ -n "$RELEASE_ID" ]; then
            echo "Found draft release ID: $RELEASE_ID"

            # Get the asset download URL for timeS429 data
            ASSET_URL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets" | \
              jq -r '.[] | select(.name | contains("timeS429")) | .browser_download_url')

            if [ "$ASSET_URL" != "null" ] && [ -n "$ASSET_URL" ]; then
              echo "Downloading timeS429 test data from: $ASSET_URL"
              curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$ASSET_URL" -o timeS429.tar.gz

              echo "Extracting timeS429 test data..."
              tar -xzf timeS429.tar.gz
              rm timeS429.tar.gz
              echo "STRAXION_TEST_DATA_DIR=$(pwd)/timeS429" >> $GITHUB_ENV
              export STRAXION_TEST_DATA_DIR=$(pwd)/timeS429
              echo "timeS429 test data extracted successfully"
              echo "Listing contents of the timeS429 test data directory $STRAXION_TEST_DATA_DIR"
              ls -l $STRAXION_TEST_DATA_DIR
            else
              echo "No timeS429 test data asset found in release"
            fi

            # Get the asset download URL for finescan data
            FINESCAN_ASSET_URL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets" | \
              jq -r '.[] | select(.name | contains("finescan_iq428")) | .browser_download_url')

            if [ "$FINESCAN_ASSET_URL" != "null" ] && [ -n "$FINESCAN_ASSET_URL" ]; then
              echo "Downloading finescan test data from: $FINESCAN_ASSET_URL"
              curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$FINESCAN_ASSET_URL" -o finescan_iq428.tar.gz

              echo "Extracting finescan test data..."
              tar -xzf finescan_iq428.tar.gz
              rm finescan_iq428.tar.gz
              echo "STRAXION_FINESCAN_DATA_DIR=$(pwd)/finescan_iq428" >> $GITHUB_ENV
              export STRAXION_FINESCAN_DATA_DIR=$(pwd)/finescan_iq428
              echo "Finescan test data extracted successfully"
              echo "Listing contents of the finescan test data directory $STRAXION_FINESCAN_DATA_DIR"
              ls -l $STRAXION_FINESCAN_DATA_DIR
            else
              echo "No finescan test data asset found in release"
            fi

            # Check if at least one type of test data was downloaded
            if [ -z "$STRAXION_TEST_DATA_DIR" ] && [ -z "$STRAXION_FINESCAN_DATA_DIR" ]; then
              echo "No test data assets found in release"
              exit 1
            fi
          else
            echo "No draft release found, skipping test data download"
            exit 1
          fi

      - name: Test package
        # This is running a normal test
        if: matrix.test == 'pytest'
        run: |
          coverage run --source=straxion -m pytest --durations 0
          coverage report

      - name: Test raw_records with data (if available)
        # Test the DAQReader plugin with real data if test data is provided
        if: matrix.test == 'pytest'
        run: |
          if [ -n "$STRAXION_TEST_DATA_DIR" ] && [ -d "$STRAXION_TEST_DATA_DIR" ]; then
            echo "Running raw_records tests with test data..."
            coverage run --source=straxion -m pytest tests/test_raw_records.py::test_straxion_test_data_dir_exists_and_not_empty tests/test_raw_records.py::test_raw_records_processing tests/test_raw_records.py::test_raw_records_data_consistency -v
            coverage report
          else
            echo "STRAXION_TEST_DATA_DIR not set or directory does not exist, skipping raw_records tests"
          fi

      - name: Test records with finescan data (if available)
        # Test the PulseProcessing plugin with real finescan data if test data is provided
        if: matrix.test == 'pytest'
        run: |
          if [ -n "$STRAXION_FINESCAN_DATA_DIR" ] && [ -d "$STRAXION_FINESCAN_DATA_DIR" ]; then
            echo "Running records tests with finescan test data..."
            coverage run --source=straxion -m pytest tests/test_records.py::TestLoadFinescanFilesWithRealData::test_finescan_data_dir_exists_and_not_empty tests/test_records.py::TestLoadFinescanFilesWithRealData::test_load_real_finescan_files tests/test_records.py::TestLoadFinescanFilesWithRealData::test_finescan_data_consistency -v
            coverage report
          else
            echo "STRAXION_FINESCAN_DATA_DIR not set or directory does not exist, skipping records tests"
          fi

      - name: Coveralls
        # Make the coverage report and upload
        env:
          NUMBA_DISABLE_JIT: 1
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: matrix.test == 'coveralls' && (github.actor != 'dependabot[bot]')
        run: |
          # Install straxion first
          pip install -e .
          coverage run --source=straxion -m pytest -v
          coveralls --service=github

      - name: Coveralls with raw_records data (if available)
        # Include raw_records tests in coverage when test data is available
        env:
          NUMBA_DISABLE_JIT: 1
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: matrix.test == 'coveralls' && (github.actor != 'dependabot[bot]')
        run: |
          if [ -n "$STRAXION_TEST_DATA_DIR" ] && [ -d "$STRAXION_TEST_DATA_DIR" ]; then
            echo "Running raw_records tests for coverage..."
            coverage run --source=straxion -m pytest tests/test_raw_records.py::test_straxion_test_data_dir_exists_and_not_empty tests/test_raw_records.py::test_raw_records_processing tests/test_raw_records.py::test_raw_records_data_consistency -v
            coveralls --service=github
          else
            echo "STRAXION_TEST_DATA_DIR not set or directory does not exist, skipping raw_records coverage tests"
          fi

      - name: Coveralls with finescan data (if available)
        # Include records tests in coverage when finescan test data is available
        env:
          NUMBA_DISABLE_JIT: 1
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: matrix.test == 'coveralls' && (github.actor != 'dependabot[bot]')
        run: |
          if [ -n "$STRAXION_FINESCAN_DATA_DIR" ] && [ -d "$STRAXION_FINESCAN_DATA_DIR" ]; then
            echo "Running records tests for coverage..."
            coverage run --source=straxion -m pytest tests/test_records.py::TestLoadFinescanFilesWithRealData::test_finescan_data_dir_exists_and_not_empty tests/test_records.py::TestLoadFinescanFilesWithRealData::test_load_real_finescan_files tests/test_records.py::TestLoadFinescanFilesWithRealData::test_finescan_data_consistency -v
            coveralls --service=github
          else
            echo "STRAXION_FINESCAN_DATA_DIR not set or directory does not exist, skipping records coverage tests"
          fi

      - name: goodbye
        run: echo 'Tests done, bye bye.'
